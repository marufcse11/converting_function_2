# -*- coding: utf-8 -*-
"""Project_1_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S3cpJPjU7o_MQ1Lf-fwrKWAZcTfr4duo
"""

!pip install --pre pycaret

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline 
import seaborn as sns
from collections import Counter, OrderedDict
import os
import glob
import math

from pycaret.datasets import get_data
boston = get_data('boston')

boston.info()

#Checking for null
boston.isnull().sum()

np.array(sorted (boston.isnull().sum()))

boston.columns[np.array(list (boston.isnull().sum()))==boston.shape[0]]

boston = boston.drop(boston.columns[np.where(np.array(list (boston.isnull().sum()))==boston.shape[0])], axis=1)

boston.describe()

# Research question1 : feature selection
# Converting 'Target' column to numeric data
boston['medv'] = pd.factorize(boston['medv'])[0]  
# Calculating the correlation between 'Target' and each column
corr = boston.corr()['medv']
# Sorting the correlation values in descending order
corr = corr.sort_values(ascending=False)
# Printing the top 10 features that have the highest correlation with 'Target'
#Drop out refers to 0, Graduate refers to 1 and 2 refers to enrolled in Target column after factorization
print(corr.head(10))

#%% Export finished file.
### Will Export to whatever folder the file was imported from
boston.to_csv('/content/drive/My Drive/Ass_1/boston.csv')

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir("/content/drive/My Drive/Ass_1")
!ls



def my_function(df_dynamic_dic):
    df_dynamic = df_dynamic_dic.copy()
    for c in df_dynamic_dic.columns:
        print("out c value = ",c)
    
        df_dynamic_dic = df_dynamic_dic.sort_values([c])
        test_str = df_dynamic_dic[c].values[0]
        if isinstance(test_str, str) == True:
            if df_dynamic_dic[c].dtype == object:
                df_dynamic_dic[c] = df_dynamic_dic[c].str.capitalize()
                print("c value = ",c)
                df_dynamic_dic[c].fillna('0', inplace=True)
                d = Counter(df_dynamic_dic[c].astype(str))           
                keys = list(d)
                award_df = pd.DataFrame.from_dict(d, orient='index')
                award_df = award_df.reset_index()
                award_df.columns = ['Value', 'Count']
                award_df = award_df.sort_values(['Count'])
                award_df.insert(0, 'Code', range(0, 0 + len(award_df)))
                award_df_1 = dict(zip(award_df['Value'], award_df['Code']))
                df_dynamic[c] = df_dynamic_dic[c].map(award_df_1)
                len(set(keys)), len(d)
                sfile = '/content/drive/My Drive/Ass_1/Dictonary_boston.xlsx'
                mode = 'a' if os.path.exists(sfile) else 'w'
                mode2 = 'replace' if os.path.exists(sfile) else None
                with pd.ExcelWriter(sfile, engine='openpyxl', mode=mode, if_sheet_exists=mode2) as writer:
                    award_df.to_excel(writer, sheet_name = c, index= False)
    return df_dynamic
                    
df_dic = my_function(boston)

import os
os.chdir("/content/drive/My Drive/Ass_1")
!ls

from pycaret.regression import *
#from pycaret.classification import *
exp_name = setup(data = df_dic,  target = 'medv')
best_model = compare_models()
plot_model(best_model)
evaluate_model(best_model)

lr = create_model('lr')
pred_holdout = predict_model(lr)
pred_unseen = predict_model(lr, data = boston)

pred_unseen

from pycaret.datasets import get_data
boston = get_data('boston')
from pycaret.regression import *
exp_name = setup(data = boston,  target = 'medv')
dt = create_model('dt')
bagged_dt = ensemble_model(dt, method = 'Bagging')

from pycaret.datasets import get_data
boston = get_data('boston')
from pycaret.regression import *
exp_name = setup(data = boston,  target = 'medv')
lr = create_model('lr')
tuned_lr = tune_model(lr)

from pycaret.datasets import get_data
boston = get_data('boston')
from pycaret.regression import *
exp_name = setup(data = boston,  target = 'medv')
lr = create_model('lr')
create_api(lr, 'lr_api')
!python lr_api.py #to run the API